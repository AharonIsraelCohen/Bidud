#!/bin/bash

ScriptPath=$(dirname $0)

# Check if the flag is matching any of 2 options
function flagValidate ()
{
	# Check if the giving flag ($1) is like $2 or $3
	if [ $1 == $2 ] &> /dev/null || [ $1 == $3 ] &> /dev/null
	then
		return 0
	else 
		echo We could not recognized this $1 option..
		return 1
	fi
}

function sizeValidate ()
{
	# In case the flag is ok..
        if flagValidate $1 $2 $3
        then
		# Check number validate
		if [ $4 -gt 0 ] &> /dev/null
		then
			return 0
		else
			echo The size has to be a number and bigger then 0
	                return 1
		fi
        else
                return 1
        fi
}

function vgFreeSpace ()
{
	echo The size you want to check is $1
	vgCount=$(vgs | wc -l)
	if [ $vgCount  -eq 0 ]
	then
		echo We dont have any vgs at all..
	else
		vgList=$(vgs | awk 'NR!=1 {print$1}')
		echo The vgs list is:
	        echo $vgList
		vgMessage=true
		vgGoodList=""

		for vg in $vgList
		do
			echo The current vg is $vg
			if lvcreate -t -L $1M $vg &> /dev/null
			then
				vgMessage=false
				vgGoodList="$vgGoodList $vg"
			fi
		done

		if $vgMessage
		then
			echo Oops we dont have any vgs with enough space for you
		else
			echo This is the list of the vgs with enough space for you:
			echo $vgGoodList
		fi
        fi
}


function vgValidate ()
{
	#wantedVg=$(vgs |awk '{print$1}'| grep -w $1 2> /dev/null)
	if vgs $1 &> /dev/null && [ ! -z "$1" ] 
	then
		return 0
	else
		echo  We dont have $1  vg
                vgFreeSpace $2
		return 1
	fi
}

function addNewDisk ()
{
	# If the disk exist
        if lsblk | grep -w $1 &> /dev/null
        then
		# Prapering the disk for LVM use, with file with the parameters
		echo -e "n\n e\n \n \n \n n \n \n \n w" | fdisk -c /dev/$1 &> /dev/null

		# Creating pv from the new disk choosing 5 because this is the number of the logic volume in a new disk
                pvcreate /dev/$15 &> /dev/null

                vgextend /dev/$2 /dev/$15 &> /dev/null
        else
                echo We can not find the disk $1
                exit 0
        fi
}
function lvNameHandle ()
{
	lastChar=$( echo $1 | rev | cut -c 1)

	if [ $lastChar == "/" ]
                then
                        lvName="${1%?}"
                        lvName=$( echo $lvName | sed 's+/+_+g')
                else
                        lvName=$( echo $1 | sed 's+/+_+g')
        fi
	echo $lvName
}

function createFileSystem ()
{
	# If there is enough space in the vg
	if lvcreate -t -L $1M $2 &> /dev/null
	then
		lvName=$(lvNameHandle $3)
		lvcreate -y -n $lvName -L $1M $2 &> /dev/null
		mkfs.ext4 /dev/$2/$lvName &> /dev/null

		# Getting the uuid of the disk
		uuid=$(blkid | grep $lvName | cut -f 2 -d " ")

		echo "$uuid    $3    ext4    defaults    0    0" >> /etc/fstab
	       	mount /dev/$2/$lvName
	else
		echo Not enough space on vg $2
		vgFreeSpace $1
	fi

}

function extendFileSystem ()
{
	# Check if there is enough space
        if lvextend -t -L +$1M $2 &> /dev/null
        then
		lvextend -L +$1M $2 &> /dev/null
		resize2fs $2 &> /dev/null 
        else
                echo Not enough space on vg $2
                vgFreeSpace $1
        fi
}

#if [ $# -lt 2 ] 
#then
#	echo You messing some argumants, use --help to get explanation!
#elif  [ $# -gt 9 ]
#then
#	echo You entered too many inputs, use --help to get explanation!
#else 
	case $1 in

		-c | --create)
                   	if sizeValidate $2 -s --size $3
			then
				if flagValidate $4 -v --vg
				then
					if vgValidate $5 $3
					then
						if flagValidate $6 -p --path
						then
							if [ ! -z $7 ]
							then
								if [ ! -d $7 ]
		                                                then
               			                                        mkdir -p $7
                               	                                else
									# Check if the dir size bigger then 4 kb(an a ampty dir size)
									dirFiles=$( ls -la $7 | wc -l )
									echo $dirFiles
	
									if [ $dirFiles -gt 3 ] 
									then 
										echo The directory is not empty
										exit 0
									fi
								fi
							else
								echo You mast enter a path name
								exit 0
							fi

							# In case there is flag for new disk
							if [ ! -z $8 ]
							then
								if flagValidate $8 '--new-disk'
	                                                        then
									# Checking if there is any disk name
									if [ -z $9 ]
									then
										echo You must enter the disk name
										exit 0
									else
                                               	        	        	addNewDisk $9 $5
										createFileSystem $3 $5 $7
									fi
                                                               	fi
                                                        else
								createFileSystem $3 $5 $7
							fi
						fi
					fi
				fi
			fi
		;;
	
		-e | --extend)
        		   if sizeValidate $2 -s --size $3
              	           then
                    	   	if flagValidate $4 -p --path
                             	then
					if [ -d $5 ] && [ ! -z $5 ]
	                                then
						lvName=$(lvNameHandle $5)
						currLv=$(df -h | grep -w $lvName | awk '{print$1}')

						# Check that the path is fileSystem
						if [ -z $currLv ]
						then
							echo We dont have any file system in $5 location
							exit 0
						fi

						currVg=$(echo $currLv | cut -f 1 -d "-" | cut -f 4 -d "/")

						# In case there is flag for new disk
						if [ ! -z $6 ] 
						then
	                                                if flagValidate $6 '--new-disk'
       		                                        then
             			                                if [ -z $7 ]
                        	                                then
                                	                        	echo You must ener the disk name
                                        	                        exit 0
                                                	        else
                                         	                       addNewDisk $7 $currVg
									extendFileSystem $3 $currLv
                                                             	fi
							fi
						else
							extendFileSystem $3 $currLv
						fi
                                       	else
						echo The directory can not be found
					fi
                                 fi
                          fi
		;;
	
		-r | --remove)
			if flagValidate $2 -p --path
                        then
				if [ -d $3 ] && [ ! -z $3 ]
				then
					lvName=$(lvNameHandle $3)
					currlv=$(df -h | grep -w $lvName | awk '{print$1}')

					# Check that the path is fileSystem
					if [ -z $currlv ]
                                        then
     	                                	echo We dont have any file system in $3 location
                                                exit 0
                                        fi

					umount $currlv
					uuid=$(blkid | grep $lvName | cut -f 2 -d " " | cut -f 2 -d "=")
					sed -i "/$uuid/d" /etc/fstab
					lvremove -y $currlv
				else
					echo There is no file system in this path
				fi
			fi
		;;
	
		-h | --help)
			echo
                        echo " Wellcome to the FileSystem creator."
			echo " Flags and their use:"
			echo
			echo "-s / --size = The FileSystem size, dont add letters to the number ( like M or G )"
		       	echo " The size is in MEGABYTES, so if you want 1G, just type 1000."
			echo
			echo '-v / --vg = The vg name that we will create lv from, you can see the vg list by typing the "vgs" command'
			echo
			echo "-p / --path = the path where you want the FileSystem to be, this place must be empty." 
		        echo " You dont have to create the directory."
			echo
			echo "--new-disk = This flag is used to add a new disk to the vg where your FileSystem his comming from."
			echo " Just type the disk name, not full path, This flag his optional and must be at the end."
		       	echo	
			echo "-c = The flag for creating new FileSystem, must contain othere flags and in a specific order"
			echo "-s / --size <SIZE_NUMBER> -v / --vg <VG_NAME> -p / --path <PATH> --newdisk(optinal) <DISK_NAME>"
			echo
			echo "-e = The flag for extanding existing FileSystem, must contain othere flags and in a specific order"
                        echo "-s / --size <SIZE_NUMBER> -p / --path <PATH> --newdisk(optinal) <DISK_NAME>"
			echo
			echo '-r = The flag for deleting FileSystem, must contain the -p / --path flag too.'
		;;

		*)
	       		echo we dont have this $1 option
		;;
	esac
#fi
